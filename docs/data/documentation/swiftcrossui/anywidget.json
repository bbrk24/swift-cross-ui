{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Uses the simplest kind of type erasure because we always know the","type":"text"},{"text":" ","type":"text"},{"text":"widget type at time of use anyway so it can simply be cast back to","type":"text"},{"text":" ","type":"text"},{"text":"a concrete type before use (removing the need to type-erase specific","type":"text"},{"text":" ","type":"text"},{"text":"methods or anything like that).","type":"text"}]}]}],"sections":[],"metadata":{"symbolKind":"class","remoteSource":{"url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Backend\/AnyWidget.swift#L10","fileName":"AnyWidget.swift"},"title":"AnyWidget","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}],"modules":[{"name":"SwiftCrossUI"}],"externalID":"s:12SwiftCrossUI9AnyWidgetC","navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}],"role":"symbol","roleHeading":"Class"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"]}],"topicSections":[{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)"]},{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftcrossui\/anywidget"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"A type-erased widget which can be stored without having to propagate","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the type system of the whole view graph","type":"text"},{"text":" ","type":"text"},{"text":"system of types, which would leak it back into user view implementations","type":"text"},{"text":" ","type":"text"},{"text":"making the backend hard to switch for developers.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"kind":"symbol","identifier":{"url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","interfaceLanguage":"swift"},"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/concreteWidget(for:)":{"url":"\/documentation\/swiftcrossui\/anywidget\/concretewidget(for:)","title":"concreteWidget(for:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"concreteWidget","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Backend","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Widget","kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI10AppBackendP6WidgetQa"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","role":"symbol","abstract":[{"text":"Converts the widget back to its original concrete type. If the requested","type":"text"},{"text":" ","type":"text"},{"text":"type doesn’t match its original type then the method will crash.","type":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"type":"topic","title":"Published","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Published"}],"navigatorTitle":[{"kind":"identifier","text":"Published"}],"abstract":[{"type":"text","text":"A wrapper which publishes a change whenever the wrapped value is set. If"},{"type":"text","text":" "},{"type":"text","text":"the wrapped value is "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":", its "},{"code":"didChange","type":"codeVoice"},{"type":"text","text":" publisher will"},{"type":"text","text":" "},{"type":"text","text":"also be forwarded to the wrapper’s publisher."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","url":"\/documentation\/swiftcrossui\/published","kind":"symbol","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"title":"Scene graph","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/swiftcrossui\/scene-graph","abstract":[],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublishedMarkerProtocol"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","title":"PublishedMarkerProtocol","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" values nested within an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"will only have their changes published by the parent "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" "},{"type":"text","text":"if marked with this marker protocol. This avoids uncertainty around which"},{"type":"text","text":" "},{"type":"text","text":"properties will or will not have their changes published by the parent."},{"type":"text","text":" "},{"type":"text","text":"For clarity reasons, you shouldn’t conform your own types to this protocol."},{"type":"text","text":" "},{"type":"text","text":"Instead, apply the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published"},{"type":"text","text":" property wrapper when needed."}],"navigatorTitle":[{"kind":"identifier","text":"PublishedMarkerProtocol"}],"type":"topic","url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","role":"symbol","url":"\/documentation\/swiftcrossui\/viewsize","type":"topic","title":"ViewSize","abstract":[{"text":"The size of a view. Includes ideal size, and minimum\/maximum width and height","type":"text"},{"text":" ","type":"text"},{"text":"along with the size you’d expect.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewSize","kind":"identifier"}],"navigatorTitle":[{"text":"ViewSize","kind":"identifier"}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"role":"symbol","kind":"symbol","abstract":[{"text":"A result builder used to compose views together into composite views in","type":"text"},{"text":" ","type":"text"},{"text":"a declarative manner.","type":"text"}],"url":"\/documentation\/swiftcrossui\/viewbuilder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewBuilder","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","title":"ViewBuilder","navigatorTitle":[{"text":"ViewBuilder","kind":"identifier"}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"navigatorTitle":[{"kind":"identifier","text":"ViewUpdateResult"}],"abstract":[],"role":"symbol","url":"\/documentation\/swiftcrossui\/viewupdateresult","title":"ViewUpdateResult","type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewUpdateResult"}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/init(_:)":{"url":"\/documentation\/swiftcrossui\/anywidget\/init(_:)","title":"init(_:)","type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Any","kind":"keyword"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)","role":"symbol","abstract":[{"text":"Erases the specific type of a widget (to allow storage without propagating","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the whole type system).","type":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"title":"HotReloadableView","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","url":"\/documentation\/swiftcrossui\/hotreloadableview","abstract":[{"type":"text","text":"A view which attempts to persist the state of its view subtree even"},{"type":"text","text":" "},{"type":"text","text":"when the subtree’s structure changes. Uses state serialization (via"},{"type":"text","text":" "},{"type":"text","text":"view graph snapshotting) to persist view state even when a child"},{"type":"text","text":" "},{"type":"text","text":"view’s implementation gets swapped out with an implementation from"},{"type":"text","text":" "},{"type":"text","text":"a newly-loaded dylib (this is what makes this useful for hot reloading)."}],"type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HotReloadableView"}],"navigatorTitle":[{"kind":"identifier","text":"HotReloadableView"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"title":"View","type":"topic","url":"\/documentation\/swiftcrossui\/view","abstract":[{"type":"text","text":"A view that can be rendered by any backend."}],"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"identifier"}],"navigatorTitle":[{"text":"View","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OptionalView","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","abstract":[{"text":"A view used by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","type":"reference"},{"text":" to support non-exhaustive if statements.","type":"text"}],"title":"OptionalView","url":"\/documentation\/swiftcrossui\/optionalview","role":"symbol","type":"topic","navigatorTitle":[{"text":"OptionalView","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"EitherView","kind":"identifier"}],"title":"EitherView","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder"},{"type":"text","text":" to support if\/else conditional statements."}],"type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EitherView","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/eitherview"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"url":"\/documentation\/swiftcrossui\/emptyview","title":"EmptyView","type":"topic","abstract":[{"text":"A placeholder view used by elementary ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"},{"text":" implementations which don’t have bodies. Fatally","type":"text"},{"text":" ","type":"text"},{"text":"crashes if rendered.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","navigatorTitle":[{"kind":"identifier","text":"EmptyView"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyView"}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"url":"\/documentation\/swiftcrossui\/layoutsystem","title":"LayoutSystem","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","abstract":[],"role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LayoutSystem","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"LayoutSystem","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/into()":{"type":"topic","abstract":[{"text":"Converts the widget back to its original concrete type. If the requested","type":"text"},{"text":" ","type":"text"},{"text":"type doesn’t match its original type then the method will crash. Often","type":"text"},{"text":" ","type":"text"},{"text":"more concise than using ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","type":"reference","isActive":true},{"text":".","type":"text"}],"kind":"symbol","title":"into()","url":"\/documentation\/swiftcrossui\/anywidget\/into()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"into","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"type":"topic","role":"collectionGroup","url":"\/documentation\/swiftcrossui\/view-graph","kind":"article","abstract":[],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","title":"View graph"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"type":"topic","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper updated by the view graph before each access to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body"},{"type":"text","text":". Conforming types should use internal mutability (see "},{"type":"codeVoice","code":"Box"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to implement this protocol’s non-mutable methods if required. This"},{"type":"text","text":" "},{"type":"text","text":"protocol avoids mutation to allow state properties and such to be"},{"type":"text","text":" "},{"type":"text","text":"captured even though views are structs."}],"kind":"symbol","url":"\/documentation\/swiftcrossui\/dynamicproperty","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","role":"symbol","title":"DynamicProperty"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"title":"AnyWidget","type":"topic","abstract":[{"type":"text","text":"A type-erased widget which can be stored without having to propagate"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the type system of the whole view graph"},{"type":"text","text":" "},{"type":"text","text":"system of types, which would leak it back into user view implementations"},{"type":"text","text":" "},{"type":"text","text":"making the backend hard to switch for developers."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","role":"symbol","url":"\/documentation\/swiftcrossui\/anywidget","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Content","preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa","kind":"typeIdentifier"}],"type":"topic","defaultImplementations":1,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","required":true,"url":"\/documentation\/swiftcrossui\/view\/body","kind":"symbol","title":"body","abstract":[{"text":"The view’s contents.","type":"text"}],"role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"type":"topic","role":"collection","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","url":"\/documentation\/swiftcrossui","abstract":[{"type":"text","text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS."}],"kind":"symbol","title":"SwiftCrossUI"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"role":"symbol","url":"\/documentation\/swiftcrossui\/observableobject","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObject","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","abstract":[{"type":"text","text":"An object that can be observed for changes."}],"kind":"symbol","navigatorTitle":[{"text":"ObservableObject","kind":"identifier"}],"type":"topic","title":"ObservableObject"}}}