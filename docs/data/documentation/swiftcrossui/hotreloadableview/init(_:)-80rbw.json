{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"child","kind":"internalParam"},{"text":": any ","kind":"text"},{"text":"View","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI4ViewP"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]}],"identifier":{"url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-80rbw","interfaceLanguage":"swift"},"metadata":{"symbolKind":"init","externalID":"s:12SwiftCrossUI17HotReloadableViewVyAcA0F0_pcfc","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:12SwiftCrossUI4ViewP"},{"kind":"text","text":")"}],"remoteSource":{"url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Views\/HotReloadableView.swift#L18","fileName":"HotReloadableView.swift"},"title":"init(_:)","roleHeading":"Initializer","modules":[{"name":"SwiftCrossUI"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftcrossui\/hotreloadableview\/init(_:)-80rbw"]}],"kind":"symbol","references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"title":"View","type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/swiftcrossui\/view","abstract":[{"type":"text","text":"A view that can be rendered by any backend."}],"role":"symbol","navigatorTitle":[{"text":"View","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView/init(_:)-80rbw":{"url":"\/documentation\/swiftcrossui\/hotreloadableview\/init(_:)-80rbw","abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:12SwiftCrossUI4ViewP"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-80rbw","title":"init(_:)"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HotReloadableView","kind":"identifier"}],"navigatorTitle":[{"text":"HotReloadableView","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A view which attempts to persist the state of its view subtree even","type":"text"},{"text":" ","type":"text"},{"text":"when the subtree’s structure changes. Uses state serialization (via","type":"text"},{"text":" ","type":"text"},{"text":"view graph snapshotting) to persist view state even when a child","type":"text"},{"text":" ","type":"text"},{"text":"view’s implementation gets swapped out with an implementation from","type":"text"},{"text":" ","type":"text"},{"text":"a newly-loaded dylib (this is what makes this useful for hot reloading).","type":"text"}],"title":"HotReloadableView","url":"\/documentation\/swiftcrossui\/hotreloadableview","type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"kind":"symbol","abstract":[{"text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","role":"collection","title":"SwiftCrossUI","url":"\/documentation\/swiftcrossui","type":"topic"}}}