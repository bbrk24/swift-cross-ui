{"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"],"generated":true}],"variants":[{"paths":["\/documentation\/swiftcrossui\/dynamicproperty"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}]}]}],"abstract":[{"text":"A property wrapper updated by the view graph before each access to","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","isActive":true,"type":"reference"},{"text":". Conforming types should use internal mutability (see ","type":"text"},{"code":"Box","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"to implement this protocol’s non-mutable methods if required. This","type":"text"},{"text":" ","type":"text"},{"text":"protocol avoids mutation to allow state properties and such to be","type":"text"},{"text":" ","type":"text"},{"text":"captured even though views are structs.","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Environment","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/State"],"title":"Conforming Types","kind":"relationships","type":"conformingTypes"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty"},"metadata":{"role":"symbol","remoteSource":{"url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/State\/DynamicProperty.swift#L6","fileName":"DynamicProperty.swift"},"externalID":"s:12SwiftCrossUI15DynamicPropertyP","modules":[{"name":"SwiftCrossUI"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"symbolKind":"protocol","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"roleHeading":"Protocol","title":"DynamicProperty"},"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty\/update(with:previousValue:)"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"}],"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"role":"collection","kind":"symbol","url":"\/documentation\/swiftcrossui","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","abstract":[{"text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS.","type":"text"}],"title":"SwiftCrossUI","type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"url":"\/documentation\/swiftcrossui\/published","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Published","kind":"identifier"}],"navigatorTitle":[{"text":"Published","kind":"identifier"}],"title":"Published","type":"topic","role":"symbol","abstract":[{"text":"A wrapper which publishes a change whenever the wrapped value is set. If","type":"text"},{"text":" ","type":"text"},{"text":"the wrapped value is ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"text":", its ","type":"text"},{"code":"didChange","type":"codeVoice"},{"text":" publisher will","type":"text"},{"text":" ","type":"text"},{"text":"also be forwarded to the wrapper’s publisher.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Environment":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Environment","url":"\/documentation\/swiftcrossui\/environment","role":"collectionGroup","abstract":[],"kind":"article","type":"topic","title":"Environment"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"abstract":[],"role":"collectionGroup","title":"Scene graph","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph","kind":"article","url":"\/documentation\/swiftcrossui\/scene-graph","type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/App/body-swift.property":{"abstract":[{"text":"The content of the app.","type":"text"}],"type":"topic","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Body","kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI3AppP4BodyQa"}],"url":"\/documentation\/swiftcrossui\/app\/body-swift.property","role":"symbol","title":"body","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/App\/body-swift.property"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ViewBuilder"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewBuilder"}],"type":"topic","abstract":[{"text":"A result builder used to compose views together into composite views in","type":"text"},{"text":" ","type":"text"},{"text":"a declarative manner.","type":"text"}],"role":"symbol","url":"\/documentation\/swiftcrossui\/viewbuilder","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","title":"ViewBuilder"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"navigatorTitle":[{"kind":"identifier","text":"OptionalView"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}],"type":"topic","title":"OptionalView","url":"\/documentation\/swiftcrossui\/optionalview","role":"symbol","abstract":[{"type":"text","text":"A view used by "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","type":"reference","isActive":true},{"type":"text","text":" to support non-exhaustive if statements."}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/swiftcrossui\/view-graph","abstract":[],"title":"View graph","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"navigatorTitle":[{"kind":"identifier","text":"EitherView"}],"title":"EitherView","url":"\/documentation\/swiftcrossui\/eitherview","role":"symbol","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","type":"topic","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"type":"text","text":" to support if\/else conditional statements."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EitherView"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ViewUpdateResult"}],"url":"\/documentation\/swiftcrossui\/viewupdateresult","title":"ViewUpdateResult","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewUpdateResult"}],"kind":"symbol","abstract":[]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}],"type":"topic","kind":"symbol","url":"\/documentation\/swiftcrossui\/dynamicproperty","title":"DynamicProperty","navigatorTitle":[{"kind":"identifier","text":"DynamicProperty"}],"abstract":[{"text":"A property wrapper updated by the view graph before each access to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","type":"reference"},{"text":". Conforming types should use internal mutability (see ","type":"text"},{"code":"Box","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"to implement this protocol’s non-mutable methods if required. This","type":"text"},{"text":" ","type":"text"},{"text":"protocol avoids mutation to allow state properties and such to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"captured even though views are structs."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"url":"\/documentation\/swiftcrossui\/observableobject","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An object that can be observed for changes."}],"navigatorTitle":[{"kind":"identifier","text":"ObservableObject"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObject"}],"title":"ObservableObject"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/State":{"type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/State","navigatorTitle":[{"kind":"identifier","text":"State"}],"kind":"symbol","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"title":"State","url":"\/documentation\/swiftcrossui\/state"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol","kind":"symbol","type":"topic","title":"PublishedMarkerProtocol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","navigatorTitle":[{"kind":"identifier","text":"PublishedMarkerProtocol"}],"abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" values nested within an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"will only have their changes published by the parent "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" "},{"type":"text","text":"if marked with this marker protocol. This avoids uncertainty around which"},{"type":"text","text":" "},{"type":"text","text":"properties will or will not have their changes published by the parent."},{"type":"text","text":" "},{"type":"text","text":"For clarity reasons, you shouldn’t conform your own types to this protocol."},{"type":"text","text":" "},{"type":"text","text":"Instead, apply the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published"},{"type":"text","text":" property wrapper when needed."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublishedMarkerProtocol"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"title":"ViewSize","url":"\/documentation\/swiftcrossui\/viewsize","navigatorTitle":[{"text":"ViewSize","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewSize","kind":"identifier"}],"abstract":[{"text":"The size of a view. Includes ideal size, and minimum\/maximum width and height","type":"text"},{"text":" ","type":"text"},{"text":"along with the size you’d expect.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"kind":"symbol","url":"\/documentation\/swiftcrossui\/view","type":"topic","abstract":[{"type":"text","text":"A view that can be rendered by any backend."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"View"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"View"}],"title":"View"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"title":"AnyWidget","abstract":[{"text":"A type-erased widget which can be stored without having to propagate","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the type system of the whole view graph","type":"text"},{"text":" ","type":"text"},{"text":"system of types, which would leak it back into user view implementations","type":"text"},{"text":" ","type":"text"},{"text":"making the backend hard to switch for developers.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"type":"topic","url":"\/documentation\/swiftcrossui\/anywidget","navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Content","preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa"}],"defaultImplementations":1,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","role":"symbol","type":"topic","url":"\/documentation\/swiftcrossui\/view\/body","required":true,"abstract":[{"type":"text","text":"The view’s contents."}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","url":"\/documentation\/swiftcrossui\/layoutsystem","role":"symbol","kind":"symbol","title":"LayoutSystem","type":"topic","abstract":[],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LayoutSystem"}],"navigatorTitle":[{"kind":"identifier","text":"LayoutSystem"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","kind":"symbol","url":"\/documentation\/swiftcrossui\/hotreloadableview","type":"topic","abstract":[{"text":"A view which attempts to persist the state of its view subtree even","type":"text"},{"text":" ","type":"text"},{"text":"when the subtree’s structure changes. Uses state serialization (via","type":"text"},{"text":" ","type":"text"},{"text":"view graph snapshotting) to persist view state even when a child","type":"text"},{"text":" ","type":"text"},{"text":"view’s implementation gets swapped out with an implementation from","type":"text"},{"text":" ","type":"text"},{"text":"a newly-loaded dylib (this is what makes this useful for hot reloading).","type":"text"}],"title":"HotReloadableView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HotReloadableView"}],"navigatorTitle":[{"kind":"identifier","text":"HotReloadableView"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty/update(with:previousValue:)":{"kind":"symbol","title":"update(with:previousValue:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty\/update(with:previousValue:)","type":"topic","required":true,"url":"\/documentation\/swiftcrossui\/dynamicproperty\/update(with:previousvalue:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"update"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI17EnvironmentValuesV","text":"EnvironmentValues"},{"kind":"text","text":", "},{"kind":"externalParam","text":"previousValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Updates the property. Called by SwiftCrossUI before every access it","type":"text"},{"text":" ","type":"text"},{"text":"makes to an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/App\/body-swift.property","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","type":"reference"},{"text":".","type":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyView"}],"type":"topic","abstract":[{"type":"text","text":"A placeholder view used by elementary "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","type":"reference","isActive":true},{"type":"text","text":" implementations which don’t have bodies. Fatally"},{"type":"text","text":" "},{"type":"text","text":"crashes if rendered."}],"navigatorTitle":[{"kind":"identifier","text":"EmptyView"}],"kind":"symbol","title":"EmptyView","url":"\/documentation\/swiftcrossui\/emptyview","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","role":"symbol"}}}